# GraphQL schema example
#
# https://gqlgen.com/getting-started/


type User {
    id: ID!
    fullName: String!
    email: String!
    ipAddress: String!
    gender: String
}

type Group {
   id: ID!
   name: String!
   createdAt: String!
   adminId: ID!
}

type PersonalConversation {
    id: ID!
    senderId: ID!
    receiverId: ID!
    content: String!
    createdAt: Timestamp!
}

input NewPersonalConversation{
    receiverId: ID!
    content : String!
}

input NewGroup {
   name: String!
}

type ConversationList {
    lastMessageTime: Timestamp!
    conversationId: ID!
    isItGroup: Boolean!
}


type GroupDetails {
    groupId: ID!
    name: String!
    adminId: ID!
    createdAt:Timestamp!
    isRemoved: Boolean!
    groupMembers:[GroupMemberDetails!]!
}

type GroupMemberDetails {
    memberId: ID!
    isRemoved: Boolean!
    removedAt: Timestamp
}

input NewGroupConversation {
    groupId: ID!
    content: String!
}

input GroupMembersInput {
    groupId: ID!
    memberId: [ID!]!
}

input MembersListThatCanJoinTheGroupInput{
    groupId: ID!
    name: String 
    email: String 
    limit: Int = 15
    page: Int = 1
}

input UserListInput{
    name: String 
    email: String 
    limit: Int = 15
    page: Int = 1
}

input DeleteGroupConversationInput{
    groupId: ID!
    messageId: ID!
}

input PersonalConversationNotificationInput{
    senderId : ID!
    receiverId : ID!
}

input GroupConversationNotificationInput{
    groupId : ID!
    memberId : ID!
}

input ChangeGroupAdminInput{
    groupId : ID!
    newAdminId : ID!
}

input ChangeGroupNameInput{
    groupId : ID!
    newGroupName : String!
}

type GroupConversation {
    id: ID!
    groupId: ID!
    content: String!
    createdAt: Timestamp!
    senderId: ID
    sender: Sender!
}

type Sender {
    name : String!
    id: ID!
}

type Mutation {
    createPersonalConversation(input: NewPersonalConversation!): PersonalConversation! @isAuthenticated
    createGroupConversation(input: NewGroupConversation!): GroupConversation! @isAuthenticated
    createGroup(input:NewGroup!): Group! @isAuthenticated
    addGroupMembers (input:GroupMembersInput!): Boolean! @isAuthenticated
    removeGroupMembers (input:GroupMembersInput!): Boolean! @isAuthenticated
    deletePersonalConversation(messageId:ID!): Boolean! @isAuthenticated
    deleteGroupConversation(input:DeleteGroupConversationInput!): Boolean! @isAuthenticated
    changeGroupAdmin(input:ChangeGroupAdminInput!): Boolean! @isAuthenticated
    changeGroupName(input:ChangeGroupNameInput!): Boolean! @isAuthenticated
    leaveGroup(groupId:ID!): Boolean! @isAuthenticated
}

type Query {
    GroupDetails(groupId:ID!): GroupDetails! @isAuthenticated
    UserList(input:UserListInput): [User!]! @isAuthenticated
    MembersListThatCanJoinTheGroup(input:MembersListThatCanJoinTheGroupInput!): [User!]! @isAuthenticated
    UserDetailsById(userId:ID!): User! @isAuthenticated
    UserNameById(userId:ID!): String! @isAuthenticated
    PersonalConversationRecords(limit: Int = 25, offset: Int = 0,receiverId: ID!): [PersonalConversation!]! @isAuthenticated
    GroupConversationRecords(limit: Int = 25, offset: Int = 0,groupId: ID!): [GroupConversation!]! @isAuthenticated
    RecentConversationList(limit: Int = 25, offset: Int = 0): [ConversationList!]! @isAuthenticated
}

type Subscription {
    personalConversationNotification(input:PersonalConversationNotificationInput!): PersonalConversation! 
    groupConversationNotification(input:GroupConversationNotificationInput!): GroupConversation! 
}

scalar Timestamp

directive @isAuthenticated on FIELD_DEFINITION
